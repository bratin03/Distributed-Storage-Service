### API Sketches with Request/Response Bodies

---

#### **1. Load Balancer (Nginx) Setup**
- **Role**: Distributes requests to backend servers (meta/block/auth servers).
- **Example Nginx Configuration**:
  ```nginx
  http {
    upstream meta_servers {
      server meta1.example.com;
      server meta2.example.com;
    }

    upstream block_servers {
      server block1.example.com;
      server block2.example.com;
    }

    server {
      listen 80;
      
      # Initial client request to get server list
      location /get_servers {
        proxy_pass http://meta_servers;
      }

      # Route auth requests to auth servers
      location /auth {
        proxy_pass http://auth_servers;
      }
    }
  }
  ```
- **Response from `/get_servers`**:
  ```json
  {
    "meta_servers": ["meta1.example.com", "meta2.example.com"],
    "block_servers": ["block1.example.com", "block2.example.com"],
    "auth_server": "auth.example.com"
  }
  ```

---

#### **2. Authentication**
- **Endpoint**: `POST /auth`
- **Request**:
  ```json
  {
    "username": "user123",
    "password": "securepassword"
  }
  ```
- **Response**:
  ```json
  {
    "token": "jwt_token",
    "server_key": "cluster1"  // For routing to the correct metadata cluster
  }
  ```

---

#### **3. Directory Operations**

**a. Create Directory**
- **Endpoint**: `PUT /create_directory/{dir_id}`
- **Request** (Body for recursive creation):
  ```json
  {
    "path": "/photos/2023",
    "parent_dir_id": "root:123"
  }
  ```
- **Response**: `200 OK`


**c. List Directory**
- **Endpoint**: `GET /list_directory/{dir_id}`
- **Response**:
  ```json
  {
    "directories": [
      { "id": "dir_123", "name": "Documents" }
    ],
    "files": [
      { "id": "file_456", "name": "report.pdf" }
    ]
  }
  ```

---

#### **4. File Operations**

**b. Download File**
1. **Request to L1 Metadata**:
   - **Endpoint**: `GET /files/{file_id}/metadata`
   - **Response**:
     ```json
     {
       "l2_metadata_server": "l2meta.example.com:8080",
       "version": 5
     }
     ```
2. **Request to L2 Metadata**:
   - **Endpoint**: `GET /files/{file_id}/chunks`
   - **Response**:
     ```json
     {
       "chunks": [
         { 
           "chunk_id": "chunk_789", 
           "l3_server": "l3meta.example.com:9090",
           "block_server": "block1.example.com"
         }
       ]
     }
     ```
3. **Download Chunk**:
   - **Endpoint**: `GET /download_chunk/{chunk_id}`
   - **Response**:
     ```json
     {
       "metadata": { "size": 1024, "hash": "sha256_abc" },
       "data": "base64_encoded_data"
     }
     ```

---

#### **5. Update File**
1. **Initiate Update**:
   - **Endpoint**: `POST /files/{file_id}/update`
   - **Request**:
     ```json
     {
       "client_version": 5
     }
     ```
   - **Response** (Conflict Case):
     ```json
     { "status": "conflict", "server_version": 6 }
     ```
   - **Response** (Success Case):
     ```json
     {
       "status": "proceed",
       "required_chunks": ["chunk_789"],  // Chunks the client is missing
       "upload_token": "token_xyz"        // For chunk uploads
     }
     ```

2. **Upload Chunks**:
   - **Endpoint**: `POST /store_chunk`
   - **Request**:
     ```json
     [{
       "chunk_id": "chunk_789",
       "metadata": { "hash": "sha256_abc" },
       "data": "base64_encoded_data"
     }]
     ```
   - **Response**: `200 OK`

3. **Commit Update**:
   - **Endpoint**: `POST /files/{file_id}/commit`
   - **Request**:
     ```json
     {
       "upload_token": "token_xyz",
       "new_version": 6
     }
     ```
   - **Response**: `200 OK`

---


### Key Design Notes:
- **Conflict Handling**: Use version numbers to reject stale updates.
- **Chunk Storage**: Block servers store chunks; metadata servers track references.
- **Async Deletion**: Clients sync on startup to reconcile deleted files.













Deletion 
Here's a detailed breakdown of the **deletion flow** across metadata servers, notification servers, and block servers, including API request/response bodies and sequence diagrams:

---

### **Deletion Flow API Sequence**

#### **1. Client Initiates Deletion**
- **Endpoint**: `DELETE /delete_file/{file_id}`  
- **Request**:  
  ```json
  {
    "client_version": 5  // Current client-side version of the file
  }
  ```
- **Response** (L1 Metadata Server):  
  ```json
  {
    "status": "pending_deletion",
    "notification_id": "notif_123",
    "server_version": 6  // Updated server-side version
  }
  ```

---

#### **2. Metadata Server → Notification Server**  
- **Internal API Call** (L1 Metadata Server to Notification Server):  
  - **Endpoint**: `POST /notify_deletion`  
  - **Request**:  
    ```json
    {
      "file_id": "file_123",
      "chunk_ids": ["chunk_1", "chunk_2"],  // Chunks to eventually delete
      "notification_id": "notif_123",
      "client_ids": ["userA", "userB"]  // Clients syncing this file
    }
    ```
  - **Response**:  
    ```json
    { "status": "notifications_queued" }
    ```

---

#### **3. Notification Server → Clients**  
- **Push Notification** (WebSocket or HTTP Long Polling):  
  ```json
  {
    "type": "delete",
    "file_id": "file_123",
    "notification_id": "notif_123",
    "deadline": "2023-10-20T12:00:00Z"  // Time by which clients must acknowledge
  }
  ```

---

#### **4. Clients Acknowledge Deletion**  
- **Endpoint**: `POST /ack_deletion`  
- **Request** (from Client):  
  ```json
  {
    "notification_id": "notif_123",
    "client_id": "userA"
  }
  ```
- **Response** (Notification Server):  
  ```json
  { "status": "acknowledged" }
  ```

---

#### **5. Notification Server → Metadata Server**  
- **Internal API Call** (After Deadline):  
  - **Endpoint**: `POST /deletion_status`  
  - **Request**:  
    ```json
    {
      "notification_id": "notif_123",
      "acknowledged_clients": ["userA"],  // Clients who responded
      "unresponsive_clients": ["userB"]    // Clients who didn’t respond
    }
    ```
  - **Response**:  
    ```json
    { "status": "proceed_with_deletion" }  // Proceed even if some clients are unresponsive
    ```

---

#### **6. Metadata Server → Block Server**  
- **Internal API Call** (L1 Metadata Server to Block Server):  
  - **Endpoint**: `POST /delete_chunks`  
  - **Request**:  
    ```json
    {
      "chunk_ids": ["chunk_1", "chunk_2"],
      "deletion_mode": "soft"  // Optional: Soft delete first, then garbage collection
    }
    ```
  - **Response** (Block Server):  
    ```json
    { "status": "chunks_marked_for_deletion" }
    ```

---

#### **7. Metadata Server Finalizes Deletion**  
- **Internal Cleanup** (L1 Metadata Server):  
  - Update file status to `deleted`.  
  - Remove references to chunks.  

---

### **Key Design Notes**

1. **Asynchronous Deletion**:  
   - Clients are notified but not blocked indefinitely.  
   - Unresponsive clients reconcile deletions on next sync (e.g., startup).  

2. **Idempotent Operations**:  
   - Use `notification_id` to avoid duplicate processing.  

3. **Chunk Deletion Strategy**:  
   - **Soft Delete**: Chunks are marked as `deleted` first.  
   - **Garbage Collection**: A background job permanently deletes chunks unreferenced by any file.  

4. **Conflict Handling**:  
   - If a client tries to modify a file marked as `pending_deletion`, reject with `409 Conflict`.  

---

### **Sequence Diagram**

```plaintext
Client          L1 Metadata       Notification Server       Block Server
  |                   |                    |                     |
  | DELETE /delete_file                    |                     |
  |------------------>|                    |                     |
  |                   |                    |                     |
  |              Mark as pending_deletion  |                     |
  |                   | POST /notify_deletion                   |
  |                   |------------------->|                     |
  |                   |                    | Notify Clients       |
  |                   |                    |---------->|
  |                   |                    |                     |
  |                   |                    | Client Acks         |
  |                   |                    |<----------|
  |                   | POST /deletion_status                   |
  |                   |<-------------------|                     |
  |                   | POST /delete_chunks                     |
  |                   |----------------------------------------->|
  |                   |                    |                     |
  |              Update status to deleted  |                     |
  |<------------------|                    |                     |
```